on:
  push:
    branches:
      - main
      - master
      - dev
      - 'feature/**'
  pull_request:
      types: [opened, synchronize, reopened]
jobs:
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        with:
          args: >
            -Dsonar.projectKey=${{ github.event.repository.name }}
            -Dsonar.projectName=${{ github.event.repository.name }}  
            -Dsonar.qualitygate.wait=true
            -Dsonar.sourceEncoding=UTF-8
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  service_matrix:
    strategy:
      matrix:
        service:
          - external-api
          - nfts-auth
          - nfts-polygon-adapter
          - nfts-stripe-adapter    
          - nfts-warehouse
          - nfts-notify
          - hubspot-proxy
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - uses: actions/checkout@v2
      - name: Set outputs
        id: vars
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
      - uses: docker/metadata-action@v3
        id: metadata
        with:
          images: ghcr.io/${{ github.repository }}/${{ matrix.service }}
      - uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: int128/kaniko-action@v1
        with:
          push: true
          file: ${{ matrix.service }}/Dockerfile
          context: ${{ matrix.service }}
          tags: ${{ steps.metadata.outputs.image }}:${{ steps.vars.outputs.sha_short }}
          labels: ${{ steps.metadata.outputs.labels }}
          cache: true
          cache-repository: ghcr.io/${{ github.repository }}/${{ matrix.service }}/cache
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ steps.metadata.outputs.image }}:${{ steps.vars.outputs.sha_short }}'
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'